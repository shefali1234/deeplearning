import cv2                 
import numpy as np        
import os                  
from random import shuffle 
from tqdm import tqdm 
from PIL import Image
from sklearn.decomposition import PCA, RandomizedPCA
from sklearn.grid_search import GridSearchCV
from sklearn.naive_bayes import GaussianNB
#import matplotlib.pyplot as plt
from sklearn.svm import SVC
import tflearn
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression
TRAIN_DIR = './fvc/fnl'
TEST_DIR = './fvc/fnl'
IMG_SIZE1 = 320
IMG_SIZE2=240
LR = 1e-3
MODEL_NAME = 'lw-{}-{}.model'.format(LR, '2conv-basic') # just so we remember which saved model 
from tflearn.data_augmentation import ImageAugmentation
imgaug = tflearn.ImageAugmentation()
imgaug.add_random_flip_leftright()
def label_img(img):
    word_label = img.split('.')[-2]
    if word_label == 'f': return [0,1]
    elif word_label == 'r': return [1,0]
    #elif word_label == 'f': return [1,0]
    print(word_label)
def create_train_data():
    training_data = []
    for img in tqdm(os.listdir(TRAIN_DIR)):
        label = label_img(img)
        path = os.path.join(TRAIN_DIR,img)
        img = cv2.imread(path,0)
        img = cv2.resize(img, (IMG_SIZE1,IMG_SIZE2))
        img=cv2.equalizeHist(img)
        #img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
        #img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])
        #img_output = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)
        #img=cv2.normalize(img, img, 0, 255, cv2.NORM_MINMAX)
        training_data.append([np.array(img),np.array(label)])
    shuffle(training_data)
    np.save('train_data.npy', training_data)
    return training_data
 def process_test_data():
    testing_data = []
    for img in tqdm(os.listdir(TEST_DIR)):
        path = os.path.join(TEST_DIR,img)
        img_num = img.split('.')[0]
        img = cv2.imread(path,0)
        img = cv2.resize(img, (IMG_SIZE1,IMG_SIZE2))
        img=cv2.equalizeHist(img)
        #img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)
        #img_yuv[:,:,0] = cv2.equalizeHist(img_yuv[:,:,0])
        #img_output = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)
        #img=cv2.normalize(img, img, 0, 255, cv2.NORM_MINMAX)
        testing_data.append([np.array(img), img_num])
        
    shuffle(testing_data)
    np.save('test_data.npy', testing_data)
    return testing_data
    
   train_data=create_train_data()
   
   net = tflearn.input_data(shape=[None, 320, 240])
net = tflearn.lstm(net, 128, return_seq=True)
net = tflearn.lstm(net, 128)
net = tflearn.fully_connected(net, 2, activation='softmax')
net = tflearn.regression(net, optimizer='adam',
                         loss='categorical_crossentropy', name="output1")
model = tflearn.DNN(net, tensorboard_verbose=2)
if os.path.exists('{}.meta'.format(MODEL_NAME)):
    model.load(MODEL_NAME)
    print('model loaded!')
    if os.path.exists('{}.meta'.format(MODEL_NAME)):
    model.load(MODEL_NAME)
    print('model loaded!')
train = train_data[:300]
test = train_data[300:]
X = np.array([i[0] for i in train])
print(X)
X = np.reshape(X, (-1, 320, 240))
Y = [i[1] for i in train]
#dataset_file = 'face/train/'
#dataset_file2 = 'face/test/'
# Build the preloader array, resize images to 128x128
#from tflearn.data_utils import image_preloader
#X, Y = image_preloader(dataset_file, image_shape=(640, 480),   mode='file', categorical_labels=True,   normalize=True)
#X, Y = image_preloader(dataset_file2, image_shape=(640, 480),   mode='file', categorical_labels=True,   normalize=True)
test_x = np.array([i[0] for i in test]).reshape(-1,320,240)
test_y = [i[1] for i in test]
# model.fit({'input':X},{'targets':Y})

